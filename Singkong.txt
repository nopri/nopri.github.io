Singkong Programming Language Interpreter
(c) Noprianto <nopri.anto@icloud.com>, 2019-2020
Website: nopri.github.io
License: Free to use or redistribute
Version: 3.4 (2020-May-01 +07:00)

Singkong is based on Monkey.java: an open source, simple implementation of 
Monkey programming language interpreter in Java.
Monkey.java is based on monkey.py: an open source, simple implementation of 
Monkey programming language interpreter in Python.
Monkey.java and monkey.py, (c) Noprianto <nopri.anto@icloud.com>, 2019.

monkey.py is based on code (in Go) in book: Writing an interpreter in Go

Singkong is developed on Java 8 with -source 1.5 -target 1.5, using only
Java 5.0-compatible application programming interface.
-----------------------------------------------------------------------------
Bundled JDBC Drivers (compatible with Java 5.0 or later): 
 Apache Derby (Apache License 2.0): Network Server, Driver (Embedded, Client)
 PostgreSQL (BSD-2-Clause License)
=============================================================================

 1. What is Singkong Programming Language
 2. System requirements
 3. Getting started
 4. Identifier, keywords, data types, and operators
 5. Builtin functions
 6. If condition
 7. Repeat loop
 8. GUI application development
 9. Database application development
10. Web application development
11. Simple HTTP client
12. Calling Java method
13. Embedding Singkong into another applications
14. Differences with Monkey Programming Language
15. Example: GUI: components
16. Example: GUI: layout
17. Example: GUI: Singkong information
18. Example: GUI: event handlers
19. Example: GUI: printing
20. Example: GUI: simple text file editor
21. Example: GUI: timer
22. Example: Database: create table, insert, update, select, GUI
23. Example: Web: variables, GET, POST, JSON
24. Example: Java: custom dialog

-----------------------------------------------------------------------------

1. What is Singkong Programming Language
Singkong is case-insensitive, dynamically typed, procedural, and interpreted 
programming language that runs on Java Virtual Machine (Java 5.0 or later). 
It has numbers, booleans, strings, arrays, hash maps, dates, first-class 
functions, built-in functions, GUI components, database connections, and 
other features. Singkong program can call Java methods and Singkong interpreter 
can be embedded and integrated into another applications. 

Singkong interpreter is distributed as single jar file. It comes with simple GUI 
editor/interactive evaluator/database tool and can be run on graphical or 
text user interfaces.  

Singkong is based on Monkey.java and inspired by Monkey Programming Language.


-----------------------------------------------------------------------------

2. System requirements
Java Runtime Environment version 5.0 or later.  

If only text-based environment is available, Singkong interactive evaluator 
will fallback to text only version and built-in functions will adapt 
appropriately.


-----------------------------------------------------------------------------

3. Getting started
Please download Singkong.jar from its website. The jar file can be saved into
any directory - no system wide installation is required. Using portable Java 
installation, Singkong can be run from external/portable storage device. 

If GUI is available, Singkong.jar features interactive evaluator, variable 
inspector, simple text editor, database tool, and documentation viewer.

To run Singkong in text mode when GUI is available, please set property
SINGKONG=0 (-DSINGKONG=0). This setting has no effect when GUI is not 
available.

To disable some (or all) built-in functions, please set property DISABLE 
(-DDISABLE) to comma-separated list of functions. If the first item in the list 
is -, then only built-in functions in the list are enabled. To disable all 
built-in functions, please set -DDISABLE=-.  

- Standalone
  - No command line argument: interactive
        java -jar Singkong.jar

        Singkong 3.4
        Press ENTER to quit
        > var hello = "Hello World"
        > hello
        "Hello World"
        > 
        
  - No command line argument: interactive (GUI available)
        java -jar Singkong.jar

        (double-clicking Singkong.jar may also work)

  - No command line argument: interactive (run in text mode, GUI available)
        java -DSINGKONG=0 -jar Singkong.jar

  - No command line argument: interactive (disable built-in: system)
        java -DDISABLE=system -jar Singkong.jar

  - No command line argument: interactive (disable built-in: system and info)
        java -DDISABLE=system,info -jar Singkong.jar

  - No command line argument: interactive (enable only built-in: len and print)
        java -DDISABLE=-,len,print -jar Singkong.jar

  - Command line argument: try to interpret as file
        java -jar Singkong.jar test.singkong

    If exception occurred: interpret the argument as Singkong code
        java -jar Singkong.jar "println(1,2,3)"
        1
        2
        3

  - Run directly the main class (and setting the class path):
        java -cp Singkong.jar com.noprianto.singkong.Singkong

        java -cp Singkong.jar com.noprianto.singkong.Singkong test.singkong

        java -cp Singkong.jar com.noprianto.singkong.Singkong "println(1,2,3)"
        
        java -DSINGKONG=0 -cp Singkong.jar com.noprianto.singkong.Singkong "println(1,2,3)"

- Library
  Please read: Embedding Singkong into another applications 

Note: please use built-in function: interactive, to get information whether 
Singkong program is run in Singkong interactive evaluator/editor. 


-----------------------------------------------------------------------------

4. Identifier, keywords, data types, and operators
Identifier starts with letter or underscore and optionally followed by letters,
numbers, or underscores. Built-in function names and keywords cannot be used as 
identifier.

Assignment is done using var statement:
var name = "singkong"
var f = fn(name) { println(name) }

Note:
- Statement optionally ends with ; 
- Block statement starts with { and ends with }
- Comment starts with # and ends with ;
- Multi-line comment is supported

Comment:
# 
	this
	is
	a
	multi-line
	comment
;
println("Singkong")

# this is another comment;
println("Programming")

# this is also a comment
;
println("Language")

Keywords:
#
ELSE
FALSE
FN
IF
LET
NULL
REPEAT
RETURN
TRUE
VAR

Note: to get list of keywords, please use built-in function keywords.

Data types:
Related functions: builtins, eval, is, hash, print, println, puts, string, type, 
types

- NULL
  - null
  - null literal
  - null may also returned from built-in functions
  - null is not printed. To print null, please use 
    print, println, puts, or message. 
- NUMBER
  - any integer and decimal
  - precision: 10240, scale: 4
  - operators: + - * / == != %(remainder) ^(power) < <= > >=
  - related functions: abs, array_number, integer, number, number_group, 
    random, round, sort_number, words_en, words_id
  - system related functions: delay
  - Singkong related functions: require
  - sorting: by value
- BOOLEAN
  - true or false
  - operators: == != & |
  - related functions: sort_boolean
  - sorting: by value
- STRING
  - double-quoted
  - arbitrary length string
  - operators: +(concatenation) -(remove) ==(equals,case-sensitive) != *(repeat)
  - equals (case-insensitive): please use built-in function equals
  - related functions: array_string, base64_decode, base64_encode, call, center, 
    count, cr, crlf, dir, empty, endswith, equals, eval, in, index, join, left, 
    len, lf, lower, matches, md5, newline, quote, random_string, replace, right, 
    set, sha1, sha256, sha384, sha512, slice, sort_string, split, startswith, 
    stat, tab, trim, upper
  - special characters: cr, crlf, lf, newline, quote, tab
  - file related functions: abs, append, read, write, rename, delete, mkdir
  - HTTP client related functions: http_delete, http_get, http_get_file, 
    http_head, http_post, http_post_override, http_put, url_decode, url_encode 
  - system related functions: cwd, separator, user
  - Singkong related functions: load
  - sorting: lexicographically
- ARRAY
  - []
  - array of mixed data types
  - operators: +(add), -(remove) == !=
  - modify ARRAY: please use built-in function set
  - related functions: array, array_number, array_string, average, call, count, 
    each, empty, first, in, index, join, last, len, max, min, pop, push, 
    random, range, rest, reverse, shuffle, slice, sort_array, sort_boolean, 
    sort_date, sort_hash, sort_number, sort_string, sum
  - file related functions: dir
  - CGI related functions: cgi_contents
  - HTTP client related functions: http_response_ok
  - system related functions: arguments, system
  - sorting: by length
- HASH
  - {}
  - hash table/dictionary
  - any data type can be used as key
  - hash maintains insertion-order
  - operators: +(add dictionary), -(remove) == !=
  - modify HASH: please use built-in function set
  - related functions: empty, keys, len, parse_hash, random, sort_hash, values
  - file related functions: properties_read, properties_write, stat
  - CGI related functions: cgi_header, cgi_get, cgi_post, cgi_post_hash
  - system related functions: env, info
  - Singkong related functions: singkong
  - sorting: by length
- DATE
  - @ @Y @YY @YYY @YYYY @YYYYM @YYYYMM @YYYYMMD @YYYYMMDD @YYYYMMDDh 
    @YYYYMMDDhh @YYYYMMDDhhm @YYYYMMDDhhmm @YYYYMMDDhhmms @YYYYMMDDhhmmss
  - related functions: date, datetime, day, diff, format_date, format_datetime,
    format_diff, hour, minute, month, part, second, sort_date, year
  - file related functions: stat
  - sorting: before/after
- FUNCTION
  - fn()
  - fn(arg)
  - fn(arg, arg,...)
  - function definition: var statement
  - function call: function name followed by (, optional comma-separated 
    arguments, and )
  - related functions: do, each, param
  - nested function is supported:
    code:
        var a = fn() {
                println("a")
                var b = fn() {
                        println("b")
                        var c = fn() {
                                println("c")
                                var d = fn() {
                                        println("d")
                                }
                                d()
                        }
                        c()
                }
                b()
        }
        a()
    output:
        a
        b
        c
        d
  - variable scope in nested function:
    code:
        var a = "A"
        var b = fn() {
                # a is available here;
                println(a)
                var c = fn() {
                        # a is no longer available here;
                        println(a)
                }
                c()
        }
        b()
    output:
        A
        ERROR: identifier not found: a
    fix:
        var a = "A"
        var b = fn() {
                # a is available here;
                println(a)
                var a = a
                var c = fn() {
                        # original a is no longer available here;
                        # but a from b is available here;
                        println(a)
                }
                c()
        }
        b()
- BUILTIN
  - built-in function
  - related functions: builtins, disabled, help, param
- COMPONENT
  - Please read: GUI application development
  - related functions: add, add_e, add_n, add_s, add_w, clear, closing, 
    component, component_type, components, config, event, frame, fonts, get, 
    gui, hide, printer, radio_group, remove, remove_e, remove_n, remove_s, 
    remove_w, reset, screen, show, size, stop, table_add, table_bottom, 
    table_center, table_left, table_middle, table_remove, table_right, 
    table_top, timer, title
  - GUI input/output functions: confirm, directory, input, open, message, 
    password, save
    (if GUI is not available: simpler text-based version)
  - GUI dialogs: login_dialog
- DATABASE
  - Please read: Database application development
  - related functions: database, database_connected, query


-----------------------------------------------------------------------------

5. Builtin functions
To get a list of built-in functions, please call builtins()
["ABS", "ADD", "ADD_E", "ADD_N", "ADD_S", "ADD_W", "APPEND", "ARGUMENTS", 
"ARRAY", "ARRAY_NUMBER", "ARRAY_STRING", "AVERAGE", "BASE64_DECODE", 
"BASE64_ENCODE", "BUILTINS", "CALL", "CALL_INFO", "CENTER", "CGI_CONTENTS", 
"CGI_GET", "CGI_HEADER", "CGI_POST", "CGI_POST_HASH", "CLEAR", "CLOSING", 
"COMPONENT", "COMPONENT_TYPE", "COMPONENTS", "CONFIG", "CONFIRM", "COUNT", 
"CR", "CRLF", "CWD", "DATABASE", "DATABASE_CONNECTED", "DATE", "DATETIME", 
"DAY", "DELAY", "DELETE", "DIFF", "DIR", "DIRECTORY", "DISABLED", "DO", "EACH", 
"EMPTY", "ENDSWITH", "ENV", "EQUALS", "EVAL", "EVENT", "EXIT", "FIRST", "FONTS", 
"FORMAT_DATE", "FORMAT_DATETIME", "FORMAT_DIFF", "FRAME", "GET", "GUI", "HASH", 
"HELP", "HIDE", "HOUR", "HTTP_DELETE", "HTTP_GET", "HTTP_GET_FILE", "HTTP_HEAD", 
"HTTP_POST", "HTTP_POST_OVERRIDE", "HTTP_PUT", "HTTP_RESPONSE_OK", "IN", 
"INDEX", "INFO", "INPUT", "INTEGER", "INTERACTIVE", "IS", "IS_UPDATE_AVAILABLE", 
"JOIN", "KEYS", "KEYWORDS", "LAST", "LEFT", "LEN", "LF", "LOAD", "LOGIN_DIALOG", 
"LOWER", "MATCHES", "MAX", "MD5", "MESSAGE", "MIN", "MINUTE", "MKDIR", "MONTH", 
"NEWLINE", "NUMBER", "NUMBER_GROUP", "OPEN", "PARAM", "PARSE_HASH", "PART", 
"PARTS", "PASSWORD", "POP", "PRINT", "PRINTER", "PRINTLN", "PROPERTIES_READ", 
"PROPERTIES_WRITE", "PUSH", "PUTS", "QUERY", "QUOTE", "RADIO_GROUP", "RANDOM", 
"RANDOM_STRING", "RANGE", "READ", "REMOVE", "REMOVE_E", "REMOVE_N", "REMOVE_S", 
"REMOVE_W", "RENAME", "REPLACE", "REQUIRE", "RESET", "REST", "REVERSE", "RIGHT", 
"ROUND", "SAVE", "SCREEN", "SECOND", "SEPARATOR", "SET", "SHA1", "SHA256", 
"SHA384", "SHA512", "SHOW", "SHUFFLE", "SINGKONG", "SIZE", "SLICE", 
"SORT_ARRAY", "SORT_BOOLEAN", "SORT_DATE", "SORT_HASH", "SORT_NUMBER", 
"SORT_STRING", "SPLIT", "STARTSWITH", "STAT", "STDIN", "STOP", "STRING", "SUM", 
"SYSTEM", "TAB", "TABLE_ADD", "TABLE_BOTTOM", "TABLE_CENTER", "TABLE_LEFT", 
"TABLE_MIDDLE", "TABLE_REMOVE", "TABLE_RIGHT", "TABLE_TOP", "TIMER", "TITLE", 
"TRIM", "TYPE", "TYPES", "UPPER", "URL_DECODE", "URL_ENCODE", "USER", "VALUES", 
"WORDS_EN", "WORDS_ID", "WRITE", "YEAR"]

>  len(builtins())
188

Note: a built-in function may be disabled when the interpreter in run. In such
case, an error will be returned when the function is called. 

To get basic information of a built-in function, please enter its name in
interactive evaluator, without ( and ). For example:

>  random
built-in function: random: returns random number (between 0 inclusive and 1 
exclusive), random number between min and max (both inclusive), random element 
in ARRAY, random key in HASH
arguments: 0, 1 (ARRAY or HASH), 2: (NUMBER and NUMBER)
return value: <any type>


-----------------------------------------------------------------------------

6. If condition
Syntax: if (condition) {consequences} else {alternatives}

condition: BOOLEAN
operators: &(and) |(or)

Example:
var name = "singkong"
if (name == "singkong") {
  print(name)
}

Note: HASH (key: condition, value: FUNCTION) may also be used 

-----------------------------------------------------------------------------

7. Repeat loop
repeat { statements }

To exit from loop, use return

Example:
var i = 0
repeat {
  print(" " + i)
  var i = i + 1
  if (i > 5) { return i }
}

Please also use do and each functions for simple repetitions:
- do: calls a function a number of times, optionally with arguments
- each: for each element in an ARRAY, calls a function a number of times 
  (with arguments). Specified function must accept two arguments: 
  the element and index (zero based).


-----------------------------------------------------------------------------

8. GUI application development
Singkong supports simple graphical user interface application development. 
To keep it as simple as possible:
- There is only one frame for each Singkong program. No other frames
  or custom dialogs can be created (using Singkong code). 
  To show common dialogs, please use related built-in functions (confirm, 
  directory, input, open, message, password, save, login_dialog).
  To create custom dialogs, please use Java method.
  To set frame title, please use built-in function title.
  To set frame size, please use built-in function size (this might not work on 
  some system configuration and will be ignored).
  To get frame properties (width, height, title), please use built-in function
  frame.
  To reset frame (remove all COMPONENTs, reset frame title and size to default
  values, stop all timers, disable frame closing confirmation), 
  please use built-in function reset. 
- Every user interface component is a COMPONENT in Singkong.
- To create a user interface component, please use built-in function component.
  This function accepts two arguments: component type and name, both as string.
  Component type must be a valid component type, and name will be used both as
  name and important properties. For example, to create a button, "button" must
  be passed as component type and name is used as label of that button. 
  Different component may use name for different purposes. For example: when 
  creating a table, name (comma-separated string) is used as column names. 
  This function also accepts optional argument BOOLEAN: if true, created 
  component will be read-only (default: false). However, this only applicable 
  when creating edit, password, table, or text. 
- To get a list of supported component types, built-in function components can 
  be used. Currently, this function returns:
  ["barchart", "button", "checkbox", "combobox", "date", "edit", "image", 
  "label", "password", "progress", "radio", "table", "text", "view"]
- To get type of a COMPONENT, please use built-in function component_type. This
  function returns component type as STRING (one of values returned by 
  components function, as above). 
- To add a COMPONENT or an ARRAY of COMPONENT to frame, please use one of the
  following built-in functions: add, add_e, add_n, add_s, add_w (which adds a 
  COMPONENT or an ARRAY of COMPONENT to specific region 
  (center, east, north, south, west) of frame. Existing components in that 
  region will be removed, prior to addition).
- To remove COMPONENTs from specific region (center, east, north, south, west) 
  of frame, please use one of the following built-in functions: remove, 
  remove_e, remove_n, remove_s, remove_w. To remove all COMPONENTs from frame, 
  please use built-in function clear. 
- To enable or disable frame closing confirmation, please use built-in function
  closing.
- To configure a COMPONENT, please use built-in function config. This function
  accepts three arguments: COMPONENT, STRING (key), and <any type> (value). 
  Different component may have different keys, but common keys are: 
  - enabled (for all components, expects value as BOOLEAN)
  - visible (for all components, expects value as BOOLEAN)
  - focus (for all components, expects value as BOOLEAN)
  - foreground/background (for all components, expects value as STRING (color name or RGB value))
  - font (for all components, expects value as ARRAY [STRING (font name), NUMBER (0=plain, 1=bold, 2=italic, 3=bold and italic), NUMBER (size)])
  - text (label of button/checkbox/label/radio, selected item of combobox, 
    title of barchart, expects value as STRING)
  - active (checkbox/radio expects value as BOOLEAN, combobox/table expects
    value as NUMBER (selected index))
  - contents (contents of barchart/combobox/date/edit/password/progress/table/text/view, 
    image file of image, expects value as STRING, ARRAY of ARRAY (table), 
    ARRAY (combobox), DATE/STRING (date), NUMBER (progress), or ARRAY of ARRAY 
    (of [NUMBER (value), STRING (label), STRING (color name or RGB value)], barchart))
  (configuration may be ignored if it is not applicable -- no errors will be
   returned).
- To get a configuration of a COMPONENT configured using config, please use
  built-in function get. This function accepts two arguments: COMPONENT and 
  STRING (key). 
  - enabled (for all components, returns a BOOLEAN)
  - visible (for all components, returns a BOOLEAN)
  - focus (for all components, returns a BOOLEAN)
  - foreground/background (for all components, returns a STRING (color name or RGB value))
  - font (for all components, returns an ARRAY [STRING (font name), NUMBER (0=plain, 1=bold, 2=italic, 3=bold and italic), NUMBER (size)])
  - text (label of button/checkbox/label/radio, selected item of combobox, 
    returns a STRING)
  - active (checkbox/radio returns a BOOLEAN, combobox/table returns a NUMBER)
  - contents (contents of combobox/date/edit/password/progress/table/text/view, 
    image file of image, returns a STRING, an ARRAY of ARRAY (of STRING, table), 
    an ARRAY (of STRING, combobox), a DATE (date), or a NUMBER (progress))
  (configuration may be ignored if it is not applicable and NULL will be
   returned).
- table: to add rows or remove a row, please use built-in function table_add or
  table_remove. 
- radio: to group an ARRAY of COMPONENT radio buttons (mutual-exclusion set), 
  please use built-in function radio_group.
- The following COMPONENTs have default event:
  - button: pressed
  - combobox: selected item changed
  - checkbox: checked/unchecked
  - radio: selected/deselected
  - table: selected item changed
  - edit/password/text: contents changed
  Event handlers for these events can be registered using built-in function
  event. This function accepts two arguments: COMPONENT and FUNCTION.
  Registered FUNCTION will be called whenever the default event for specified
  COMPONENT should be handled. 
  Please note that specified FUNCTION must not require any arguments.
  Known limitations in event handler:
  - To output text in event handler, please use GUI related built-in functions 
    (for example, please use message instead of println).
        reset()
        var hello = "Hello World"
        var b = component("button", "Button")
        add(b)
        event(b, fn() {
                # println has no effect here;
                println(hello)
                message(hello)
        })
        show()
  - If there is any error in event handler, no error messages will be printed.
        reset()
        var hello = "Hello World"
        var b = component("button", "Button")
        add(b)
        event(b, fn() {
                message(hello)
                # error;
                error
                # stop here;
                message(hello)
        })
        show()
  - Please also read about nested function in Singkong documentation (FUNCTION).
    code:
        var hello = "Hello World"
        var a = fn() {
                reset()
                var b = component("button", "Button")
                add(b)
                event(b, fn() {
                        # hello is not available here;
                        # please also read about nested function;
                        # in Singkong documentation;
                        message(hello)
                })
                show()
        }
        a()
    fix:
        var hello = "Hello World"
        var a = fn() {
                reset()
                var b = component("button", "Button")
                add(b)
                var hello = hello
                event(b, fn() {
                        # original hello is not available here;
                        # hello from a is available here;
                        # please also read about nested function;
                        # in Singkong documentation;
                        message(hello)
                })
                show()
        }
        a()
- Printing: simple printing can be done using print dialog. To show a print
  dialog, please use built-in function printer. Basic settings such as 
  font name, font size, left/top margin are supported. 
- To get the size of the screen, please use built-in function screen.
- To calls a FUNCTION every specified delay, please use built-in function timer.
  This function accepts two arguments: NUMBER (delay in milliseconds) and
  FUNCTION. To stop all timers, please use built-in function stop. 
- To get list of available fonts, please use built-in function fonts.
- Date: 
  - When creating a date COMPONENT, name is used as format pattern. If it is
    not set, default value of "yyyy-MM-dd" is used. If time is needed, in 
    addition to default format, "yyyy-MM-dd HH:mm:ss" may be used. If day and 
    month names are preferred, "EEE, yyyy-MMM-dd" or "EEEE, yyyy-MMMM-dd" 
    may be used. Please refer to Java SimpleDateFormat documentation for 
    supported format patterns.
  - To configure a date COMPONENT, a DATE or a STRING representation of a DATE 
    can be used:
    - If STRING representation is used: please use built-in function parts 
      to convert parts of a DATE as STRING. For example: 
        var d = component("date","")
        config(d, "contents", parts(@))
    - If DATE is used: no conversion is needed. For example:
        var d = component("date","")
        config(d, "contents", @)
  - Get a configuration of a date COMPONENT: a DATE is returned 


-----------------------------------------------------------------------------

9. Database application development
Singkong supports simple database application development (SQL relational 
database management system). 
- Every connection to a database system is a DATABASE in Singkong.
- To connect to a database system, please use built-in function database. This
  function accepts four arguments:
  - STRING: database driver, Java class found in class path
  - STRING: database URL
  - STRING: user
  - STRING: password
- Singkong.jar contains the following database drivers 
  (compatible with Java 5.0 or later):
  - Apache Derby
    - org.apache.derby.jdbc.EmbeddedDriver
    - org.apache.derby.jdbc.ClientDriver
  - PostgreSQL
    - org.postgresql.Driver
  for complete database URLs and their options, please refer to Apache Derby or
  PostgreSQL JDBC documentation
- Singkong.jar also contains Apache Derby Network Server
  (compatible with Java 5.0 or later)
  - To run the network server with custom security policy and built-in
    authentication (username: admin, password: admin), please create 
    derby.policy and derby.properties files in current working directory:
    - derby.policy
        grant {
            permission java.io.FilePermission "${user.dir}${/}-", "read, write, delete";

            permission java.lang.RuntimePermission "getFileStoreAttributes";
            permission java.lang.RuntimePermission "createClassLoader";
            permission java.lang.RuntimePermission "accessUserInformation";

            permission java.util.PropertyPermission "derby.__serverStartedFromCmdLine", "read, write";
            permission java.util.PropertyPermission "user.dir", "read";

            permission java.net.SocketPermission "127.0.0.1:1527", "accept, connect, listen,resolve"; 
            permission java.net.SocketPermission "127.0.0.1", "accept, resolve"; 

        };
    - derby.properties
        derby.connection.requireAuthentication=true
        derby.authentication.provider=BUILTIN
        derby.user.admin=admin
    - Singkong.jar
        java -cp Singkong.jar -Djava.security.manager -Djava.security.policy=derby.policy org.apache.derby.drda.NetworkServerControl start
  - To run the network server without security manager and without authentication 
    (for testing only, please do not do that in production environment):
    java -cp Singkong.jar org.apache.derby.drda.NetworkServerControl start -noSecurityManager
  Please refer to Apache Derby documentation for more information
- In order to use external database drivers from another jar file/directory, 
  please run Singkong using the following command:
  java -cp Singkong.jar:<jar> com.noprianto.singkong.Singkong
  or
  java -cp Singkong.jar:<dir> com.noprianto.singkong.Singkong
  or
  java -cp Singkong.jar;<jar> com.noprianto.singkong.Singkong
  or
  java -cp Singkong.jar;<dir> com.noprianto.singkong.Singkong
  where <jar> is a jar file and <dir> is a directory containing database driver 
  class. Please note that class path separator character is operating system 
  dependent (: or ;). If the driver class file is located in current working 
  directory, <dir> might be replaced with a ., for example:
  java -cp Singkong.jar:. com.noprianto.singkong.Singkong
- Database connection example:
    >  var db = database("org.apache.derby.jdbc.EmbeddedDriver", "jdbc:derby:test;create=true", "", "")
    >  db
    DATABASE (URL=jdbc:derby:test;create=true, user=, driver=org.apache.derby.jdbc.EmbeddedDriver)
- To test whether a database connection is valid, please use built-in function
  database_connected.
- Supported Singkong and Java type mapping:
  - BOOLEAN -> Java: boolean
  - DATE -> Java: java.sql.Date
  - NUMBER -> Java: int (if a NUMBER looks like an integer) or 
              Java: java.math.BigDecimal
  - STRING -> Java: String
  Unsupported Singkong data type in query: returns error
- To run an ARRAY of SQL queries, please use built-in function query. This
  function accepts two arguments: DATABASE and ARRAY of ARRAY. Each element 
  in the specified ARRAY must be an ARRAY of two elements: STRING (SQL command
  and ARRAY of arguments). SQL queries are run in transaction, which will
  be committed if no errors occurred. 
- Singkong.jar comes with simple GUI database tool:
  - Table list (double-click to run SQL SELECT command)
  - Query tool (run SQL query)
  - Result: update count/result set (table)
- Note:
  - Embedded Derby: only one Java Virtual Machine may open a database, another
    connection from different Java Virtual Machine to the same database will 
    fail
    - In interactive evaluator
        >  var d = database("org.apache.derby.jdbc.EmbeddedDriver", "jdbc:derby:test;create=true", "", "")
        >  d
        DATABASE (URL=jdbc:derby:test;create=true, user=, driver=org.apache.derby.jdbc.EmbeddedDriver)
        >  var d = database("org.apache.derby.jdbc.EmbeddedDriver", "jdbc:derby:test;create=true", "", "")
        >  d
        DATABASE (URL=jdbc:derby:test;create=true, user=, driver=org.apache.derby.jdbc.EmbeddedDriver)
    - Please run another Singkong interpreter
        >  var d = database("org.apache.derby.jdbc.EmbeddedDriver", "jdbc:derby:test;create=true", "", "")
        >  d
        DATABASE (null)


-----------------------------------------------------------------------------

10. Web application development
Singkong supports simple web application development in form of Common Gateway
Interface (CGI).
- To output CGI headers, please use built-in function cgi_header.
- To output text contents (for example, HTML), built-in function cgi_contents 
  may be used. Manually printing to standard output using built-in function
  println (or print) is also supported.
- To get QUERY_STRING (x-www-form-urlencoded) from HTTP GET request as HASH 
  (decoded keys/values), please use built-in function cgi_get.
- To get body (x-www-form-urlencoded) of HTTP POST request as HASH 
  (decoded keys/values), please use built-in function cgi_post.
- To get body (x-www-form-urlencoded) of HTTP POST (STRING of HASH) request as 
  HASH (decoded keys/values), please use built-in function cgi_post_hash.
- Using HTTP server with CGI support:
  - Contents of CGI script (Singkong program) may be saved as separate file
    (for example: index.singkong). This file should be placed outside of the 
    CGI-enabled directories. 
  - To handle HTTP request, shell script or batch file (depending on the 
    operating system) may be used (which in turn, runs Singkong interpreter 
    and Singkong program, for example "java -jar Singkong.jar index.singkong").
    - Command echoing feature, if any, should be turned off.


-----------------------------------------------------------------------------

11. Simple HTTP client
Singkong comes with simple HTTP client. 
- Default user agent: Singkong <version>
- Encode or decode: please use built-in functions url_encode or url_decode 
- Base64: please use built-in functions base64_encode or base64_decode
- Read timeout can be set for each request (default: 10 seconds)
- Headers may be set for each request
- HEAD
  - built-in function: http_head
  - Accept-Charset: UTF-8
  - Redirection from HTTP to HTTPS is supported
  - Only one redirect is followed (Location header)
  - Supported redirects: 301, 302, 303
  - Built-in function returns ARRAY (headers, response code, data) or NULL
- GET
  - built-in functions: http_get, http_get_file
  - Accept-Charset: UTF-8
  - Redirection from HTTP to HTTPS is supported
  - Only one redirect is followed (Location header)
  - Supported redirects: 301, 302, 303
  - To download a file, please use built-in function: http_get_file
  - Built-in functions return ARRAY (headers, response code, data) or NULL
- POST 
  - built-in functions: http_post, http_post_override
  - Accept-Charset: UTF-8
  - Content-Type: application/x-www-form-urlencoded;charset=UTF-8
  - Body may be empty
  - To do a HTTP POST with X-HTTP-Method-Override, please use built-in function
    http_post_override
  - Built-in functions return ARRAY (headers, response code, data) or NULL
- PUT
  - built-in function: http_put
  - Accept-Charset: UTF-8
  - Content-Type: application/x-www-form-urlencoded;charset=UTF-8
  - Body may be empty
  - Built-in function returns ARRAY (headers, response code, data) or NULL
- DELETE
  - built-in function: http_delete
  - Accept-Charset: UTF-8
  - Content-Type: application/x-www-form-urlencoded;charset=UTF-8
  - Body is not supported
  - Built-in function returns ARRAY (headers, response code, data) or NULL
- Unsupported method
  - If the server supports X-HTTP-Method-Override, http_post_override probably
    can be used (for example, with PATCH request method)
- Working with JSON
  - JSON is not explicitly supported in Singkong. However, HASH probably can be 
    used.
  - To convert from HASH to STRING, please use built-in function string.
  - To convert from STRING to HASH, please use built-in function parse_hash.  
- Additional built-in functions:
  - http_response_ok: on successful HTTP request (returns ARRAY (headers, 
    response code, data)), if the response status code is 200, returns the data. 
    Otherwise, returns NULL.


-----------------------------------------------------------------------------

12. Calling Java method
It is possible to call static Java method and use the returned value, to 
provide functionalities in Java Programming Language. 
- To call static Java method, please use built-in function call. This function
  accepts two-arguments: STRING (Java class name found in class path) and
  any type. This function returns STRING, ARRAY (of STRING), 
  ARRAY (of ARRAY (of STRING)), or NULL (error). 
- Please note that Java class name must be found in class path. In order to use
  class from another jar file/directory, please run Singkong using the 
  following command:
  java -cp Singkong.jar:<jar> com.noprianto.singkong.Singkong
  or
  java -cp Singkong.jar:<dir> com.noprianto.singkong.Singkong
  or
  java -cp Singkong.jar;<jar> com.noprianto.singkong.Singkong
  or
  java -cp Singkong.jar;<dir> com.noprianto.singkong.Singkong
  where <jar> is a jar file and <dir> is a directory containing the 
  class. Please note that class path separator character is operating system 
  dependent (: or ;). If the class file is located in current working directory,
  <dir> might be replaced with a ., for example:
  java -cp Singkong.jar:. com.noprianto.singkong.Singkong
- Called method must be static method named: singkong. It must require a 
  String[][] and return a String, a String[], or a String[][]. 
- When the method is called, Singkong interpreter will use STRING representation
  of Singkong value passed to Java method, if necessary. Singkong will never 
  pass a Java null to the method.
  - If it is not an ARRAY:
    - String[1][] will be created
    - Its first element will be a String[1], containing a single 
      element of STRING representation of Singkong value passed to this method
  - If it is an ARRAY:
    - String[][] will be created, whose length is the length
      of passed ARRAY
    - For each element in this ARRAY:
      - If it is not an ARRAY:
        - String[1] will be created, containing STRING representation of the
          element
      - If it is an ARRAY:
        - String[] will be created, whose length is the length of this ARRAY
        - This newly created String[] will be populated with STRING 
          representation of each element in this ARRAY
- If there is any error when calling this method, NULL will be returned. If 
  the method returns something other than String, String[], or String[][], 
  NULL will be returned. If an exception occurred, NULL will be returned.
- Example 1: 
  - HelloWorld.java in examples directory. Please make sure there is
    a static method: public static String singkong(String[][] args) {

    public class HelloWorld {
        public static String singkong_info() {
            return "HelloWorld: Description, license, ...";
        }

        public static String singkong(String[][] args) {
            StringBuilder builder = new StringBuilder();
            for (int i=0; i<args.length; i++) {
                String[] r = args[i];
                for (int j=0; j<r.length; j++) {
                    String s = r[j];
                    builder.append(s);
                    builder.append(", ");
                }
                builder.append("; ");
            }
            return builder.toString();
        }

        public static void main(String[] args) {
            System.out.println("HelloWorld: Singkong Programming Language module");
        }
    }

  - This file is compiled to HelloWorld.class

    cd examples
    javac HelloWorld.java 
    cd ..

  - Because the required HelloWorld.class is located in examples directory, 
    relative to current working directory,
    Singkong should be run using the following command: 
    java -cp Singkong.jar:examples com.noprianto.singkong.Singkong
    or (depending on the operating system)
    java -cp Singkong.jar;examples com.noprianto.singkong.Singkong

  - Singkong program can call the method (a STRING is returned):

    >  var x = call("HelloWorld", [[], [1], [2,3], [4,5,6]])
    >  x
    "; 1, ; 2, 3, ; 4, 5, 6, ; "

    >  type(x)
    "STRING"

- Example 2: 
  - HelloWorldArray.java in examples directory. Please make sure 
    there is a static method: public static String[] singkong(String[][] args). 
    Please note that this method returns String[], not String. 

    public class HelloWorldArray {
        public static String singkong_info() {
            return "HelloWorldArray: Description, license, ...";
        }

        public static String[] singkong(String[][] args) {
            String[] ret = new String[args.length];
            for (int i=0; i<args.length; i++) {
                StringBuilder builder = new StringBuilder();
                String[] r = args[i];
                for (int j=0; j<r.length; j++) {
                    String s = r[j];
                    builder.append(s);
                    builder.append(", ");
                }
                ret[i] = builder.toString();
            }
            return ret;
        }

        public static void main(String[] args) {
            System.out.println("HelloWorldArray: Singkong Programming Language module");
        }
    }

  - This file is compiled to HelloWorldArray.class

    cd examples
    javac HelloWorldArray.java
    cd ..

  - Run Singkong:
    java -cp Singkong.jar:examples com.noprianto.singkong.Singkong
    or (depending on the operating system)
    java -cp Singkong.jar;examples com.noprianto.singkong.Singkong

  - Singkong program can call the method (an ARRAY (of STRING) is returned):

    >  var x = call("HelloWorldArray", [[], [1], [2,3], [4,5,6]])
    >  x
    ["", "1, ", "2, 3, ", "4, 5, 6, "]

    >  type(x)
    "ARRAY"

    >  each(x, fn(x, y){ println(y + ": " + type(x) + ": " + x)})
    0: STRING: 
    1: STRING: 1, 
    2: STRING: 2, 3, 
    3: STRING: 4, 5, 6, 

- Example 3: 
  - HelloWorldArrayArray.java in examples directory. Please make sure 
    there is a static method: public static String[][] singkong(String[][] args). 
    Please note that this method returns String[][], not String[]. 

    public class HelloWorldArrayArray {
        public static String singkong_info() {
            return "HelloWorldArrayArray: Description, license, ...";
        }

        public static String[][] singkong(String[][] args) {
            String[][] ret = new String[args.length][];
            for (int i=0; i<args.length; i++) {
                String[] r = args[i];
                String[] x = new String[r.length];
                for (int j=0; j<r.length; j++) {
                    String s = r[j];
                    x[j] = s;
                }
                ret[i] = x;
            }
            return ret;
        }

        public static void main(String[] args) {
            System.out.println("HelloWorldArrayArray: Singkong Programming Language module");
        }
    }

  - This file is compiled to HelloWorldArrayArray.class

    cd examples
    javac HelloWorldArrayArray.java
    cd ..

  - Run Singkong:
    java -cp Singkong.jar:examples com.noprianto.singkong.Singkong
    or (depending on the operating system)
    java -cp Singkong.jar;examples com.noprianto.singkong.Singkong

  - Singkong program can call the method (an ARRAY (of ARRAY (of STRING)) is 
    returned):

    >  var x = call("HelloWorldArrayArray", [[], [1], [2,3], [4,5,6]])
    >  x
    [[], ["1"], ["2", "3"], ["4", "5", "6"]]

    >  each(x, fn(x, y){ println(y + ": " + type(x) + ": " + x)})
    0: ARRAY: []
    1: ARRAY: ["1"]
    2: ARRAY: ["2", "3"]
    3: ARRAY: ["4", "5", "6"]

- Returned String from Java method can be a valid Singkong program, that can
  be evaluated using built-in function eval (if this function is not disabled):

  - HelloWorldEval.java:

    public class HelloWorldEval {
        public static String singkong_info() {
            return "HelloWorldEval: Description, license, ...";
        }

        public static String singkong(String[][] args) {
            StringBuilder builder = new StringBuilder();
            for (int i=0; i<args.length; i++) {
                String[] r = args[i];
                for (int j=0; j<r.length; j++) {
                    String s = r[j];
                    builder.append(s);
                    builder.append(", ");
                }
                builder.append("; ");
            }

            return String.format("component(\"button\", \"%s\")", 
                builder.toString());
        }   

        public static void main(String[] args) {
            System.out.println("HelloWorldEval: Singkong Programming Language module");
        }
    }

  - Singkong program can call the method and use the returned value as Singkong
    code:

    >  var code = call("HelloWorldEval", [[], [1], [2,3], [4,5,6]])
    >  code
    "component("button", "; 1, ; 2, 3, ; 4, 5, 6, ; ")"

    >  var b = eval(code)
    >  b
    COMPONENT: button (; 1, ; 2, 3, ; 4, 5, 6, ; )

    >  add(b)
    >  show()

- To get information about the class (if provided), please use built-in function
  call_info. This function accepts one argument: STRING (Java class name found 
  in class path). The class must have a static method named: singkong_info, 
  without parameter, and return a String.

    >  call_info("HelloWorld")
    "HelloWorld: Description, license, ..."

    >  call_info("HelloWorldArray")
    "HelloWorldArray: Description, license, ..."

    >  call_info("HelloWorldArrayArray")
    "HelloWorldArrayArray: Description, license, ..."

    >  call_info("HelloWorldEval")
    "HelloWorldEval: Description, license, ..."


-----------------------------------------------------------------------------

13. Embedding Singkong into another applications
Java applications:
- Class: com.noprianto.singkong.Singkong
- Methods: 
    public static java.lang.String evaluatorString(java.lang.String);

    public static java.lang.String evaluatorString(java.lang.String,
        java.lang.String[]);

    public static java.lang.String evaluatorString(java.lang.String,
        com.noprianto.singkong.SingkongEnvironment);

    public static java.lang.String evaluatorString(java.lang.String,
        com.noprianto.singkong.SingkongEnvironment,java.lang.String[]);

    public static void evaluatorString(java.lang.String,
        com.noprianto.singkong.SingkongEnvironment,java.io.PrintStream);

    public static void evaluatorString(java.lang.String,
        com.noprianto.singkong.SingkongEnvironment,java.io.PrintStream,
        java.lang.String[]);

- From java.util.Map to SingkongEnvironment:
    public static com.noprianto.singkong.SingkongEnvironment environmentFromMap(
        java.util.Map);


Example 1: Test.java
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        String code = "var list = [1,2,3] println(list)";
        String output = Singkong.evaluatorString(code);
        System.out.println(output);
    }
}

javac -cp Singkong.jar Test.java 
java -cp Singkong.jar:. Test
[1, 2, 3]


Example 2: Test.java
import com.noprianto.singkong.Singkong;
  
public class Test {
    public static void main(String[] args) {
        String code = "println([1,2,3]) system()";
        String output = Singkong.evaluatorString(code, new String[]{"system"});
        System.out.println(output);
    }
}

javac -cp Singkong.jar Test.java 
java -cp Singkong.jar:. Test
[1, 2, 3]
ERROR: built-in function "system" is disabled


Example 3: Test.java
import java.util.Map;
import java.util.HashMap;
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("hello", "Hello, World");
        map.put("test", true);

        String code = "println(hello) println(test)";
        String output = Singkong.evaluatorString(code,
            Singkong.environmentFromMap(map));

        System.out.println(output);
    }
}

javac -cp Singkong.jar Test.java 
java -cp Singkong.jar:. Test
Hello, World
true


Example 4: Test.java
import java.util.Map;
import java.util.HashMap;
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("hello", "Hello, World");

        String code = "println(hello) info()";
        String output = Singkong.evaluatorString(code,
            Singkong.environmentFromMap(map),
            new String[]{"system", "info"});

        System.out.println(output);
    }
}

javac -cp Singkong.jar Test.java
java -cp Singkong.jar:. Test
Hello, World
ERROR: built-in function "info" is disabled


Example 5: Test.java
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        String result = "";

        Map<String, Object> map = new HashMap<String, Object>();
        map.put("hello", "Hello, World");
        map.put("test", true);

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            PrintStream output = new PrintStream(outputStream);
            Singkong.evaluatorString("println(hello) println(test)", 
                    Singkong.environmentFromMap(map), output);
            result = outputStream.toString();
        } catch (Exception e) {
        }

        System.out.println(result);
    }
}

javac -cp Singkong.jar Test.java 
java -cp Singkong.jar:. Test
Hello, World
true


Example 6: Test.java
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        String result = "";

        Map<String, Object> map = new HashMap<String, Object>();
        map.put("hello", "Hello, World");

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            PrintStream output = new PrintStream(outputStream);
            Singkong.evaluatorString("println(hello) info()",
                    Singkong.environmentFromMap(map), output,
                    new String[]{"system", "info"});
            result = outputStream.toString();
        } catch (Exception e) {
        }

        System.out.println(result);
    }
}

javac -cp Singkong.jar Test.java
java -cp Singkong.jar:. Test
Hello, World
ERROR: built-in function "info" is disabled


Another applications:
Example 7: Python
>>> import subprocess
>>> c = ['java', '-jar', 'Singkong.jar', 'println("singkong")']
>>> o = subprocess.check_output(c)
>>> print(o)
singkong


Example 8: Python
>>> import subprocess
>>> c = ['java', '-DDISABLE=info', '-jar', 'Singkong.jar', 'info()']
>>> o = subprocess.check_output(c)
>>> print(o)
ERROR: built-in function "info" is disabled


-----------------------------------------------------------------------------

14. Differences with Monkey Programming Language
- Singkong is case-insensitive
- Assignment is done using var statement (let is supported, for compatibility)
- Identifier starts with a letter or an underscore and optionally followed by 
  letters, numbers, or underscores
- null literal
- null is not printed
- Singkong has no INTEGER data type. Singkong has NUMBER data type that is
  compatible with INTEGER in Monkey, with support for decimal numbers.
- Additional operators for NUMBER: % ^ <= >=
- Additional operators for BOOLEAN: & |
- HASH: any data type can be used as key/value, maintains insertion-order
- More built-in functions
- Additional data types: DATE, COMPONENT (GUI application development), and
  DATABASE (database connection, database application development)
- Singkong uses operators for operations on data types, wherever possible
  (for example: * for string repeat, - for string remove, - for array 
  remove, and many more).
- Repeat loop (and built-in functions: do, each for simple looping)
- Some (or all) built-in functions may be disabled when the interpreter in run 
- Singkong supports multi-line comment (between # and ;)


-----------------------------------------------------------------------------

15. Example: GUI: components
reset()
var b = component("button", "Hello")
var c = component("checkbox", "Singkong?")
var m = component("combobox", "Singkong,Programming,Language")
var d = component("date", "EEEE, yyyy-MMMM-dd")
var e = component("edit", "Hello, World")
var i = component("image", "image.jpg")
var l = component("label", "Singkong Programming Language")
var p = component("password", "test")
var g = component("progress", "")
var r = component("radio", "Radio Button")
var t = component("table", "A,B,C,D,E")
var x = component("text", "Singkong")
var v = component("view", "<b>Singkong</b><br>Programming")

var z = component("barchart", "")
config(z, "foreground", "red")
config(z, "background", "white")
config(z, "font", ["monospaced", 1, 20])
config(z, "text", "Singkong")
config(z, "contents", [[10, "A", "green"], [20, "B", "blue"]]) 

add([e, t, z])
add_n([i, l, x, p, c, r, m, b])
add_s([v, d, g])

closing("Are you sure you want to quit this application?", 
  "Please confirm")
show()


-----------------------------------------------------------------------------

16. Example: GUI: layout
reset()
var c = component("button", "C")
var e = component("button", "E")
var n = component("button", "N")
var w = component("button", "W")

var s1 = component("button", "S 1")
var s2 = component("button", "S 2")
var s3 = component("button", "S 3")
var s = [s1, s2, s3]

add(c)
add_e(e)
add_n(n)
add_s(s)
add_w(w)

show()


-----------------------------------------------------------------------------

17. Example: GUI: Singkong information
reset()
var t = component("table","KEY,VALUE,TYPE", true)
var l = component("label", "Singkong Programming Language information")

add_n(l)
add(t)

var s = singkong()
var a = []
var f = fn(x,i) {
    var v = s[x]
    var a = a + [x, v, type(v)]
}
each(keys(s), f)

config(t, "contents", a)
show()


-----------------------------------------------------------------------------

18. Example: GUI: event handlers
reset()
var b = component("button", "Hello, World")
var c = component("checkbox", "Singkong?")
var r = component("radio", "Radio Button")
var m = component("combobox", "Singkong,Programming,Language")
var t = component("table", "A,B", true)
var e = component("edit", "")
var p = component("password", "")
var x = component("text", "")
var v = component("view", "")

var bb = fn() {
    message(get(b,"text"))
}
event(b, bb)

var cc = fn() {
    message(get(c,"active"))
}
event(c, cc)

var rr = fn() {
    message(get(r,"active"))
}
event(r, rr)

var mm = fn() {
    message(get(m, "text"))
}
event(m, mm)

config(t, "contents", [[1,2],[3,4],[5,6]])
var tt = fn() {
    message(get(t, "contents")[get(t, "active")])
}
event(t, tt)

var ee = fn() {
    var content = get(e, "contents")
    config(v, "contents", content)
}
event(e, ee)

var pp = fn() {
    message(get(p, "contents"))
}
event(p, pp)

var xx = fn() {
    message(get(x, "contents"))
}
event(x, xx)

add_n([p, x])
add_s([b, c, r, m])
add([t, e, v])
show()


-----------------------------------------------------------------------------

19. Example: GUI: printing
reset()
var t = ["Singkong", "Programming", "Language"]
var s = 16
var x = 150
var y = 150
var font = "monospaced"
printer(t, s, x, y, font)


-----------------------------------------------------------------------------

20. Example: GUI: simple text file editor
reset()
var e = component("edit", "")
var o = component("button", "open")
var s = component("button", "save")
var l = component("label", "")

var oo = fn() {
    var f = open()
    if (!empty(f)) {
        config(e, "contents", read(f))
        config(l, "text", f)
    }
}
event(o, oo)

var ss = fn() {
    var f = save()
    if (!empty(f)) {
        var t = get(e, "contents")
        write(f, t)
        config(l, "text", f)
    }
}
event(s, ss)

add_n(l)
add(e)
add_s([o, s])
show()


-----------------------------------------------------------------------------

21. Example: GUI: timer
reset()
var l = component("label", string(@))
var b1 = component("button", "start")
var b2 = component("button", "stop")

add(l)
add_s([b1, b2])

var f = fn() {
    config(l, "text", string(@))
}

var timer_start = fn() {
    timer(1000, f)
}

var timer_stop = fn() {
    stop()
}

event(b1, timer_start)
event(b2, timer_stop)

show()


-----------------------------------------------------------------------------

22. Example: Database: create table, insert, update, select, GUI
reset()
var t = component("table", "A,B", true)
add(t)

var d = database("org.apache.derby.jdbc.EmbeddedDriver", "jdbc:derby:test;create=true", "", "")
if (database_connected(d)) {
    var q = [ ["create table test(a integer, b varchar(64))", []] ]
    var r = query(d, q)
    
    var q = [ 
        ["insert into test(a,b) values(?, ?)", [random(0,100), "hello"]], 
        ["update test set b=? where b=?", ["Hello World", "hello"]] 
    ]
    var r = query(d, q)

    var q = [ ["select a,b from test", []] ]
    var r = query(d, q)
    if (!empty(r)) {
        config(t, "contents", r[0])
    }
}

show()


-----------------------------------------------------------------------------

23. Example: Web: variables, GET, POST, JSON
Note: the following examples require a HTTP server with CGI support. Please
make sure that the CGI support has been enabled and configured. All of the 
following CGI scripts are saved in a CGI-enabled directory and accessed from
/cgi-bin/<SCRIPT> URL (for example: http://localhost/cgi-bin/index.sh or 
http://localhost/cgi-bin/index.bat). All required file system permissions 
should be set (for example, make the CGI scripts executable on supported 
systems). Singkong programs called by those CGI scripts may be saved in any 
directory accessible by user running the HTTP server.  

Example 1: environment variables
CGI script: index.sh (if you are using Bash) or index.bat (if you using batch
file)
- index.sh
    #!/bin/bash

    # Please put this file in CGI-enabled directory of the web server

    # Please adjust the variables appropriately   
    JAVA=java
    SINGKONG=/home/user/singkong/Singkong.jar
    PROGRAM=/home/user/singkong/index.singkong

    $JAVA -jar $SINGKONG $PROGRAM

- index.bat
    @echo off

    REM Please put this file in CGI-enabled directory of the web server

    REM Please adjust the variables appropriately   
    set JAVA=java
    set SINGKONG=c:\singkong\Singkong.jar
    set PROGRAM=c:\singkong\index.singkong

    %JAVA% -jar %SINGKONG% %PROGRAM%

Singkong program: index.singkong
    var e = env()
    var c = [
        "<!DOCTYPE html>
        <html lang='en'>
            <head>
                <meta charset='UTF-8'>
                <title>Singkong</title>
            </head>
            <body>
                Remote address: " + e["REMOTE_ADDR"] + "<br>
                HTTP user agent: " + e["HTTP_USER_AGENT"] + "
            </body>
        </html>"
    ]

    cgi_header()
    cgi_contents(c)


Example 2: GET request (query string: min=<number>&max=<number>; response: JSON)
CGI script: random.sh (if you are using Bash) or random.bat (if you using batch
file)
- random.sh
    #!/bin/bash

    # Please put this file in CGI-enabled directory of the web server

    # Please adjust the variables appropriately   
    JAVA=java
    SINGKONG=/home/user/singkong/Singkong.jar
    PROGRAM=/home/user/singkong/random.singkong

    $JAVA -jar $SINGKONG $PROGRAM

- random.bat
    @echo off

    REM Please put this file in CGI-enabled directory of the web server

    REM Please adjust the variables appropriately   
    set JAVA=java
    set SINGKONG=c:\singkong\Singkong.jar
    set PROGRAM=c:\singkong\random.singkong

    %JAVA% -jar %SINGKONG% %PROGRAM%

Singkong program: random.singkong
    var h = {"Content-Type": "application/json"}
    var r = {"random": ""}
    var p = cgi_get()
    var x = p["min"]
    var y = p["max"] 

    if (is(x, "STRING") & is(y, "STRING")) {
        var z = random(number(x), number(y))
        if (z != null) {
            set(r, "random", string(z))
        }
    }

    cgi_header(h)
    println(r)


Example 3: POST request (body: username=<string>&password=<string>; 
response: JSON)
CGI script: auth.sh (if you are using Bash) or auth.bat (if you using batch
file)
- auth.sh
    #!/bin/bash

    # Please put this file in CGI-enabled directory of the web server

    # Please adjust the variables appropriately   
    JAVA=java
    SINGKONG=/home/user/singkong/Singkong.jar
    PROGRAM=/home/user/singkong/auth.singkong

    $JAVA -jar $SINGKONG $PROGRAM

- auth.bat
    @echo off

    REM Please put this file in CGI-enabled directory of the web server

    REM Please adjust the variables appropriately   
    set JAVA=java
    set SINGKONG=c:\singkong\Singkong.jar
    set PROGRAM=c:\singkong\auth.singkong

    %JAVA% -jar %SINGKONG% %PROGRAM%

Singkong program: auth.singkong
    var h = {"Content-Type": "application/json"}
    var r = {"result": false}
    var p = cgi_post()
    var x = p["username"]
    var y = p["password"] 

    if (is(x, "STRING") & is(y, "STRING")) {
        set(r, "result", x == "admin" & y == "admin")
    }

    cgi_header(h)
    println(r)

Singkong program (HTTP client): login.singkong 
    var url = trim(input("URL", "Login"))
    if (!startswith(url, "http")) {
        exit()
    }

    var login = login_dialog("Login")
    if (len(login) == 2) {
        var u = login[0]
        var p = login[1]
        var data = "username=" + u + "&password=" + p
        var res = http_post(url, data)
        if (res != null) {
            if (is(res, "ARRAY")) {
                if (len(res) == 3) {
                    var r = parse_hash(res[2])
                    message(r["result"])
                }
            }
        }
    }


-----------------------------------------------------------------------------

24. Example: Java: custom dialog
Please read: Calling Java method. 
The following file is saved in examples directory, 
relative to current working directory.

- Dialog.java (compiled to Dialog.class: javac Dialog.java)

    import java.awt.BorderLayout;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;
    import javax.swing.JButton;
    import javax.swing.JDialog;
    import javax.swing.JTextField;

    public class Dialog extends JDialog implements ActionListener{
        private String value;
        private String param;
        private JTextField text;
        private JButton button;

        public Dialog(String param) {
            setModal(true);

            value = "";
            this.param = param;

            text = new JTextField();
            button = new JButton(param);
            button.addActionListener(this);

            add(text);
            add(button, BorderLayout.SOUTH);
            pack();
        }

        public String getValue() {
            setVisible(true);
            return value;
        }

        public void actionPerformed(ActionEvent e) {
            value = text.getText();
            setVisible(false);
            dispose();
        }

        public static String singkong_info() {
            return "Dialog: Custom dialog in Java";
        }

        public static String singkong(String[][] args) {
            String param = "";
            if (args.length > 0) {
                String[] r = args[0];
                if (r.length > 0) {
                    param = r[0];
                }
            }
            Dialog dialog = new Dialog(param);
            return dialog.getValue();
        }

        public static void main(String[] args) {
            System.out.println("Dialog: Singkong Programming Language module");
        }
    }

- Run Singkong:

    java -cp Singkong.jar:examples com.noprianto.singkong.Singkong
    or (depending on the operating system)
    java -cp Singkong.jar;examples com.noprianto.singkong.Singkong

- Singkong program can call the method:

    >  var value = call("Dialog", "Singkong")

    (enter Hello World in the text field of dialog)
    (click the Singkong button)

    >  value
    "Hello World"


=============================================================================
Thank you for using Singkong Programming Language.
