#
    Util
    util.singkong

    Part of Singkong Programming Language Interpreter
    (c) Noprianto <nop@noprianto.com>

    More information: https://nopri.github.io/singkong.html
    Download Singkong: https://nopri.github.io/Singkong.jar
    (License: Free to use or redistribute, no warranty)

    To use this module:
    load_module("util")
;

require(9.4)

var _non_empty_array_of_number = fn(x) 
"
[util] function: _non_empty_array_of_number: returns NULL if argument is not a non-empty ARRAY of NUMBER, otherwise returns the argument.
arguments: 1: <any>
return value: ARRAY or NULL
" 
{
    if (!is(x, "ARRAY")) {
        return null
    }
    if (empty(x)) {
        return null
    }
    if (!is_array_of(x, "NUMBER")) {
        return null
    }
    return x
}

var array_copy = fn(a) 
"
[util] function: array_copy: copies an ARRAY.
arguments: 1: ARRAY
return value: ARRAY
" 
{
    if (!is(a, "ARRAY")) {
        return null
    }
    var ret = []
    each(a, fn(e,i) {
      var ret = ret + e
    })
    return ret
}

var hash_copy = fn(h) 
"
[util] function: hash_copy: copies a HASH.
arguments: 1: HASH
return value: HASH
" 
{
    if (!is(h, "HASH")) {
        return null
    }
    return {} + h
}

var mean = fn(x) 
"
[util] function: mean: returns the mean of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    var x = _non_empty_array_of_number(x)
    if (x == null) {
        return x
    }
    return average(x)
}

var median = fn(x) 
"
[util] function: median: returns the median of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    var x = _non_empty_array_of_number(x)
    if (x == null) {
        return x
    }
    var x = sort_number(x)
    var n = len(x)
    var m = integer(n/2)
    if (n % 2 == 1) {
        return x[m]
    } else {
        var r = x[m-1] + x[m]
        return r/2
    }
}

var mode = fn(x) 
"
[util] function: mode: returns the mode of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: ARRAY ([mode, frequency]) or NULL
" 
{
    var x = _non_empty_array_of_number(x)
    if (x == null) {
        return x
    }
    var f = {}
    each(x, fn(e, i) {
        if (f[e] == null) {
            set(f, e, 1)
        } else {
            set(f, e, f[e] + 1)
        }
    })
    var m = [null, 0]
    each(keys(f), fn(e, i) {
        var v = f[e]
        if (v > m[1]) {
            set(m, 1, v)
            set(m, 0, e)
        }
    })
    return m
}

var range_ = fn(x) 
"
[util] function: range_: returns the range of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    var x = _non_empty_array_of_number(x)
    if (x == null) {
        return x
    }
    return max(x) - min(x)
}

var array_diff = fn(x, y) 
"
[util] function: array_diff: returns the difference of two ARRAYs.
arguments: 2: ARRAY and ARRAY
return value: ARRAY or NULL
" 
{
    if (!is(x, "ARRAY") | !is(y, "ARRAY") ) {
        return null
    }
    each(y, fn(e, i) {
        var x = x - e
    })
    return x
}

var sort_rect_array_of_number_by_index = fn(x, index_) 
"
[util] function: sort_rect_array_of_number_by_index: sorts (in-place) a rectangular ARRAY of NUMBER, based on index.
arguments: 2: ARRAY (rectangular ARRAY of NUMBER) and NUMBER (index)
return value: ARRAY or NULL
" 
{
    var size_ = rect_array_size_of(x, "NUMBER")
    if (size_ == null) {
        return null
    }
    if (!is(index_, "NUMBER")) {
        return null
    }
    if (index_ >= size_[1] | index_ < 0) {
        return null
    }
    var j = 1
    repeat {
        if (j >= len(x)) {
            return null
        }
        var key = x[j]
        var i = j - 1
        repeat {
            if (i < 0) {
                return null
            }
            if (x[i][index_] <= key[index_]) {
                return null
            }
            set(x, i+1, x[i])
            var i = i - 1
        }
        set(x, i+1, key)
        var j = j + 1
    }

    return x
}

var variance_ = fn(x, sample) 
"
[util] function: variance_: returns the variance of an ARRAY.
arguments: 2: ARRAY (of NUMBER) and BOOLEAN (is sample)
return value: NUMBER or NULL
" 
{
    var m = mean(x)
    if (m == null) {
        return m
    }
    
    if (!is(sample, "BOOLEAN")) {
        return null
    }

    var s = []
    each(x, fn(e, i) {
        var s = s + ((e - m) ^ 2)
    })
    
    var n = len(x)
    if (sample == true) {
        var n = n - 1
    }
    
    return sum(s) / n
}

var variance = fn(x) 
"
[util] function: variance: returns the variance of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    return variance_(x, false)
}

var variance_sample = fn(x) 
"
[util] function: variance: returns the variance (sample) of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    return variance_(x, true)
}

var standard_deviation_ = fn(x, sample) 
"
[util] function: standard_deviation: returns the standard deviation of an ARRAY.
arguments: 2: ARRAY (of NUMBER) and BOOLEAN (is sample)
return value: NUMBER or NULL
" 
{
    var s = variance_(x, sample)
    if (s == null) {
        return s
    }
    
    return sqrt(s)
}

var standard_deviation = fn(x) 
"
[util] function: standard_deviation: returns the standard deviation of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    return standard_deviation_(x, false)
}

var standard_deviation_sample = fn(x) 
"
[util] function: standard_deviation: returns the standard deviation (sample) of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    return standard_deviation_(x, true)
}

var factorial = fn(x) 
"
[util] function: factorial: returns factorial of a NUMBER (integer >= 0).
arguments: 1: NUMBER
return value: NUMBER or NULL
" 
{
    if (!is(x, "NUMBER")) {
        return null
    }
    var x = integer(x)
    if (x < 0) {
        return null
    }
    
    if (x == 0) {
        return 1
    }
    
    var r = [1]
    each(range(2, x+1), fn(e, i) {
        set(r, 0, r[0] * e)
    })
    
    return r[0]
}

var binomial_coefficient = fn(n, k) 
"
[util] function: binomial_coefficient: returns binomial coefficient.
arguments: 2: NUMBER (total, integer >= 0) and NUMBER (choice, integer >= 0, <= total)
return value: NUMBER or NULL
" 
{
    if (!is(n, "NUMBER") | !is(k, "NUMBER")) {
        return null
    }

    var n = integer(n)
    var k = integer(k)

    if (n < 0 | k < 0 | k > n) {
        return null
    }

    var c = factorial(n) / (factorial(k) * factorial(n-k))
    return c
}

var binomial_distribution = fn(n, k, p) 
"
[util] function: binomial_distribution: returns probability (binomial).
arguments: 3: NUMBER (total), NUMBER (choice), and NUMBER (probability)
return value: NUMBER or NULL
" 
{
    if (!is(n, "NUMBER") | !is(k, "NUMBER") | !is(p, "NUMBER")) {
        return null
    }
    if (p < 0 | p > 1) {
        return null
    }
    
    var c = binomial_coefficient(n, k)
    if (c == null) {
        return null
    }
    
    var f = (p^k) * ((1-p) ^ (n-k))
    return c*f
}

var geometric_distribution_success = fn(x, p) 
"
[util] function: geometric_distribution_success: returns probability (geometric, success).
arguments: 2: NUMBER (trial, integer > 0) and NUMBER (probability, success)
return value: NUMBER or NULL
" 
{
    if (!is(x, "NUMBER") | !is(p, "NUMBER")) {
        return null
    }
    if (p < 0 | p > 1) {
        return null
    }
    var x = integer(x)
    if (x < 1) {
        return null
    }
    
    var r = ((1-p) ^ (x-1)) * p
    return r
}

var geometric_distribution_failure = fn(x, p) 
"
[util] function: geometric_distribution_failure: returns probability (geometric, failure).
arguments: 2: NUMBER (trial, integer >= 0) and NUMBER (probability, failure)
return value: NUMBER or NULL
" 
{
    if (!is(x, "NUMBER") | !is(p, "NUMBER")) {
        return null
    }
    if (p < 0 | p > 1) {
        return null
    }
    var x = integer(x)
    if (x < 0) {
        return null
    }
    
    var r = ((1-p) ^ x) * p
    return r
}

var poisson_distribution = fn(k, e) 
"
[util] function: poisson_distribution: returns probability (Poisson).
arguments: 2: NUMBER (occurrence, integer >= 0) and NUMBER (event, >= 0)
return value: NUMBER or NULL
" 
{
    if (!is(k, "NUMBER") | !is(e, "NUMBER")) {
        return null
    }
    var k = integer(k)
    if (k < 0 | e < 0) {
        return null
    }
    
    var r = ((e ^ k) * (_e() ^ -e)) / factorial(k)
    return r
}

var simple_string_encrypt = fn(a, b) 
"
[util] function: simple_string_encrypt: encrypts a STRING.
arguments: 2: STRING (string) and STRING (key)
return value: STRING or NULL
"
{
    if ((!is(a, "STRING")) | (!is(b, "STRING")))  {
        return null
    }
    if (empty(a) | empty(b)) {
        return null
    }
    var r = []
    var x = len(b)
    each(array(a), fn(e, i) {
        var k = b[i % x]
        var z = number_xor(ord(e), ord(k))
        var r = r + chr(z)
    })
    return join("", r)
}

var simple_string_decrypt = fn(a, b) 
"
[util] function: simple_string_decrypt: decrypts a STRING.
arguments: 2: STRING (string) and STRING (key)
return value: STRING or NULL
"
{
    return simple_string_encrypt(a, b)
}

var simple_file_encrypt = fn(a, b, c) 
"
[util] function: simple_file_encrypt: encrypts a file.
arguments: 3: STRING (path, input file), STRING (key), and STRING (path, output file)
return value: BOOLEAN or NULL
"
{
    if ((!is(a, "STRING")) | (!is(b, "STRING")) | (!is(c, "STRING")))  {
        return null
    }
    if (empty(a) | empty(b) | empty(c)) {
        return null
    }
    var f = read_byte(a)
    if (f == null) {
        return null
    }
    var r = []
    var x = len(b)
    each(f, fn(e, i) {
        var k = b[i % x]
        var z = number_xor(e, ord(k))
        var r = r + z
    })
    return write_byte(c, r)
}

var simple_file_decrypt = fn(a, b, c) 
"
[util] function: simple_file_decrypt: decrypts a file.
arguments: 3: STRING (path, input file), STRING (key), and STRING (path, output file)
return value: BOOLEAN or NULL
"
{
    return simple_file_encrypt(a, b, c)
}

var number_group_c_p = fn(a) 
"
[util] function: number_group_c_p: returns STRING representation of NUMBER, grouped by separator characters (grouping/thousands separator: comma and decimal sign: period). 
arguments: 1: NUMBER
return value: STRING (empty=error)
"
{
    return number_group(a, ",", ".")
}

var number_group_p_c = fn(a) 
"
[util] function: number_group_p_c: returns STRING representation of NUMBER, grouped by separator characters (grouping/thousands separator: period and decimal sign: comma). 
arguments: 1: NUMBER
return value: STRING (empty=error)
"
{
    return number_group(a, ".", ",")
}

var number_group_s_p = fn(a) 
"
[util] function: number_group_s_p: returns STRING representation of NUMBER, grouped by separator characters (grouping/thousands separator: space and decimal sign: period). 
arguments: 1: NUMBER
return value: STRING (empty=error)
"
{
    return number_group(a, " ", ".")
}

var number_group_s_c = fn(a) 
"
[util] function: number_group_s_c: returns STRING representation of NUMBER, grouped by separator characters (grouping/thousands separator: space and decimal sign: comma). 
arguments: 1: NUMBER
return value: STRING (empty=error)
"
{
    return number_group(a, " ", ",")
}

