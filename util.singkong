#
    Util
    util.singkong

    Part of Singkong Programming Language Interpreter
    (c) Noprianto <nopri.anto@icloud.com>

    More information: https://nopri.github.io/singkong.html
    Download Singkong: https://nopri.github.io/Singkong.jar
    (License: Free to use or redistribute, no warranty)

    To use this module:
    load_module("util")
;

require(5.5)

var _non_empty_array_of_number = fn(x) 
"
[util] function: _non_empty_array_of_number: returns NULL if argument is not a non-empty ARRAY of NUMBER, otherwise returns the argument.
arguments: 1: <any>
return value: ARRAY or NULL
" 
{
    if (!is(x, "ARRAY")) {
        return null
    }
    if (empty(x)) {
        return null
    }
    if (!is_array_of(x, "NUMBER")) {
        return null
    }
    return x
}

var array_copy = fn(a) 
"
[util] function: array_copy: copies an ARRAY.
arguments: 1: ARRAY
return value: ARRAY
" 
{
    if (!is(a, "ARRAY")) {
        return null
    }
    var ret = []
    each(a, fn(e,i) {
      var ret = ret + e
    })
    return ret
}

var hash_copy = fn(h) 
"
[util] function: hash_copy: copies a HASH.
arguments: 1: HASH
return value: HASH
" 
{
    if (!is(h, "HASH")) {
        return null
    }
    return {} + h
}

var mean = fn(x) 
"
[util] function: mean: returns the mean of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    var x = _non_empty_array_of_number(x)
    if (x == null) {
        return x
    }
    return average(x)
}

var median = fn(x) 
"
[util] function: median: returns the median of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    var x = _non_empty_array_of_number(x)
    if (x == null) {
        return x
    }
    var x = sort_number(x)
    var n = len(x)
    var m = integer(n/2)
    if (n % 2 == 1) {
        return x[m]
    } else {
        var r = x[m-1] + x[m]
        return r/2
    }
}

var mode = fn(x) 
"
[util] function: mode: returns the mode of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: ARRAY ([mode, frequency]) or NULL
" 
{
    var x = _non_empty_array_of_number(x)
    if (x == null) {
        return x
    }
    var f = {}
    each(x, fn(e, i) {
        if (f[e] == null) {
            set(f, e, 1)
        } else {
            set(f, e, f[e] + 1)
        }
    })
    var m = [null, 0]
    each(keys(f), fn(e, i) {
        var v = f[e]
        if (v > m[1]) {
            set(m, 1, v)
            set(m, 0, e)
        }
    })
    return m
}

var range_ = fn(x) 
"
[util] function: range_: returns the range of an ARRAY.
arguments: 1: ARRAY (of NUMBER)
return value: NUMBER or NULL
" 
{
    var x = _non_empty_array_of_number(x)
    if (x == null) {
        return x
    }
    return max(x) - min(x)
}

var array_diff = fn(x, y) 
"
[util] function: array_diff: returns the difference of two ARRAYs.
arguments: 2: ARRAY and ARRAY
return value: ARRAY or NULL
" 
{
    if (!is(x, "ARRAY") | !is(y, "ARRAY") ) {
        return null
    }
    each(y, fn(e, i) {
        var x = x - e
    })
    return x
}

var sort_rect_array_of_number_by_index = fn(x, index_) 
"
[util] function: sort_rect_array_of_number_by_index: sorts (in-place) a rectangular ARRAY of NUMBER, based on index.
arguments: 2: ARRAY (rectangular ARRAY of NUMBER) and NUMBER (index)
return value: ARRAY or NULL
" 
{
    var size_ = rect_array_size_of(x, "NUMBER")
    if (size_ == null) {
        return null
    }
    if (!is(index_, "NUMBER")) {
        return null
    }
    if (index_ >= size_[1] | index_ < 0) {
        return null
    }
    var j = 1
    repeat {
        if (j >= len(x)) {
            return null
        }
        var key = x[j]
        var i = j - 1
        repeat {
            if (i < 0) {
                return null
            }
            if (x[i][index_] <= key[index_]) {
                return null
            }
            set(x, i+1, x[i])
            var i = i - 1
        }
        set(x, i+1, key)
        var j = j + 1
    }

    return x
}

