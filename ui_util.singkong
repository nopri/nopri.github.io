#
    User Interface Util
    ui_util.singkong

    Part of Singkong Programming Language Interpreter
    (c) Noprianto <nop@noprianto.com>

    More information: https://nopri.github.io/singkong.html
    Download Singkong: https://nopri.github.io/Singkong.jar
    (License: Free to use or redistribute, no warranty)

    To use this module:
    load_module("ui_util")
;

require(10.0)

var table_to_text = fn(a, b) 
"
[ui_util] function: table_to_text: returns text representation of a table (COMPONENT).
arguments: 2: COMPONENT (table) and ARRAY (of NUMBER (integer), column width)
return value: STRING or NULL
"
{
    if ((!is(a, "COMPONENT")) | (!is_array_and_of(b, "NUMBER"))) {
        return null
    }
    if (component_type(a) != "table") {
        return null
    }
    if (len(b) != table_column_count(a)) {
        return null
    }
    var c = []
    each(b, fn(e, i) {
        var c = c + integer(e)
    })
    var columns = table_column_info(a)
    if (columns == null) {
        return null
    }
    var headers = []
    each(columns, fn(e, i) {
        var w = c[i]
        var s = e[0]
        var h = slice(s, 0, w)
        var h = center(h, w, " ")
        var headers = headers + h
    })
    var rows = []
    var contents = get(a, "contents")
    each(contents, fn(e, i) {
        var temp = []
        each(e, fn(ee, ii) {
            var w = c[ii]
            var h = slice(ee, 0, w)
            var n = columns[ii][1]
            var f = {
                0: left,
                1: center,
                2: right
            }
            var t = f[n](h, w, " ")
            var temp = temp + t
        }) 
        var row = "|" + join("|", temp) + "|"
        var rows = rows + row
    })    
    var header = "|" + join("|", headers) + "|"
    var s1 = newline() + "=" * len(header) + newline()
    var s2 = newline() + "-" * len(header) + newline()
    return s1 + header + s1 + join(s2, rows) + s1
}

var table_to_html = fn(a, b) 
"
[ui_util] function: table_to_html: returns HTML representation of a table (COMPONENT).
arguments: 2: COMPONENT (table) and ARRAY (of NUMBER (integer), column width in percent)
return value: STRING or NULL
"
{
    if ((!is(a, "COMPONENT")) | (!is_array_and_of(b, "NUMBER"))) {
        return null
    }
    if (component_type(a) != "table") {
        return null
    }
    if (len(b) != table_column_count(a)) {
        return null
    }
    var c = []
    each(b, fn(e, i) {
        var c = c + integer(e)
    })
    var columns = table_column_info(a)
    if (columns == null) {
        return null
    }
    var headers = []
    each(columns, fn(e, i) {
        var s = e[0]
        var h = "<th bgcolor='white'><b>" + s + "</b></th>"
        var headers = headers + h
    })
    var rows = []
    var contents = get(a, "contents")
    each(contents, fn(e, i) {
        var temp = []
        each(e, fn(ee, ii) {
            var w = c[ii]
            var n = columns[ii][1]
            var f = {
                0: "left",
                1: "center",
                2: "right"
            }[n]
            var t = "<td width='" + w + "%' bgcolor='white' align='" + f + "'>" + ee + "</td>"
            var temp = temp + t
        }) 
        var row = "<tr>" + join("", temp) + "</tr>"
        var rows = rows + row
    })  
    var t1 = "<table bgcolor='black' border='1px' width='100%' cellspacing='1' cellpadding='2'>"  
    var t2 = "</table>"
    var header = "<tr>" + join("", headers) + "</tr>"
    return t1 + header + join("", rows) + t2
}

var table_fill = fn(a, b) 
"
[ui_util] function: table_fill: fills a table (COMPONENT).
arguments: 2: COMPONENT (table) and <any>
return value: NUMBER or NULL
"
{
    if ((!is(a, "COMPONENT"))) {
        return null
    }
    if (component_type(a) != "table") {
        return null
    }
    var b = string(b)
    var r = [0]
    var cols = table_column_count(a)
    var rows = table_row_count(a)
    each(range(0, rows), fn(e, i) {
        each(range(0, cols), fn(ee, ii) {
            table_set_value(a, b, e, ee)
            set(r, 0, r[0]+1)
        })
    })
    return r[0]
}

var table_add_row_fill = fn(a, b, c) 
"
[ui_util] function: table_add_row_fill: adds rows and fills a table (COMPONENT).
arguments: 3: COMPONENT (table), NUMBER (rows), and <any>
return value: NUMBER or NULL
"
{
    if ((!is(a, "COMPONENT")) | (!is(b, "NUMBER")) ) {
        return null
    }
    if (component_type(a) != "table") {
        return null
    }
    if (b < 1) {
        return null
    }
    var c = string(c)
    var cols = table_column_count(a)
    var row = []
    var rows = []
    each(range(0, cols), fn(e, i) {
        var row = row + c
    })
    each(range(0, b), fn(e, i) {
        var rows = rows + row
    })
    table_add(a, rows)
    return cols * b
}

var table_add_fill = fn(a, b) 
"
[ui_util] function: table_add_fill: adds rows (= column count) and fills a table (COMPONENT).
arguments: 2: COMPONENT (table) and <any>
return value: NUMBER or NULL
"
{
    if ((!is(a, "COMPONENT"))) {
        return null
    }
    if (component_type(a) != "table") {
        return null
    }
    return table_add_row_fill(a, table_column_count(a), b)
}

var table_get_array_ = fn(t, f) 
"
[ui_util] function: table_get_array_: returns contents of a table (COMPONENT) as an ARRAY (skipping empty cells), with optional FUNCTION/BUILTIN.
arguments: 2: COMPONENT (table) and FUNCTION/BUILTIN/NULL
return value: ARRAY or NULL
"
{
    if (!is(t, "COMPONENT")) {
        return null
    }
    if (component_type(t) != "table") {
        return null
    }
    if (!( is(f, "FUNCTION") | is(f, "BUILTIN") | is(f, "NULL"))) {
        return null
    }
    var a = get(t, "contents")
    var ret = []
    each(a, fn(e, i) {
        var row = []
        each(e, fn(ee, ii) {
            var ee_ = trim(ee)
            if (!empty(ee_)) { 
                if (f != null) {
                    var row = row + f(ee_) 
                } else {
                    var row = row + ee_
                }
            }
        })
        if (!empty(row)) {
            var ret = ret + row
        }
    })
    return ret
}

var table_get_array_string = fn(t) 
"
[ui_util] function: table_get_array_string: returns contents of a table (COMPONENT) as an ARRAY of STRING (skipping empty cells).
arguments: 1: COMPONENT (table)
return value: ARRAY or NULL
"
{
    return table_get_array_(t, null)
}

var table_get_array_number = fn(t) 
"
[ui_util] function: table_get_array_number: returns contents of a table (COMPONENT) as an ARRAY of NUMBER (skipping empty cells).
arguments: 1: COMPONENT (table)
return value: ARRAY or NULL
"
{
    return table_get_array_(t, number)
}

var thread_timer_ = fn(delay_time, func, progress, done, intrinsic_lock) 
"
[ui_util] function: thread_timer_: calls function in another thread, updates user interface (using timer).
arguments: 5: NUMBER (delay time, in milliseconds), FUNCTION (function to call, accepts an ARRAY [percent, message, data]), FUNCTION (function updating user interface: progress, accepts an ARRAY), FUNCTION (function updating user interface: done, accepts an ARRAY), and <any> (intrinsic lock). 
return value: NUMBER (thread id) or NULL (error)
"
{
    if (! (is(func, "FUNCTION") & is(progress, "FUNCTION") & is(done, "FUNCTION") & is(delay_time, "NUMBER")) ) {
        return null
    }

    var p = [0, "", null]

    var th = thread(fn() {
        func(p)
    }, intrinsic_lock)

    var ts = number(@)
    var tm = timer(delay_time, fn() {
        var td = number(@) - ts
        if (thread_alive(th) == false) {
            done([p, td, ts, @])
            stop_timer(tm)
        } else {
            progress([p, td, ts, @])
        }
    })
    return th
}

var thread_timer = fn(func, progress, done, intrinsic_lock) 
"
[ui_util] function: thread_timer: calls function in another thread, updates user interface (using timer, every 100 milliseconds).
arguments: 4: FUNCTION (function to call, accepts an ARRAY [percent, message, data]), FUNCTION (function updating user interface: progress, accepts an ARRAY), FUNCTION (function updating user interface: done, accepts an ARRAY), and <any> (intrinsic lock). 
return value: NUMBER (thread id) or NULL (error)
"
{
    return thread_timer_(100, func, progress, done, intrinsic_lock)
}

var popup_show_progress_ = fn(w, h, m) 
"
[ui_util] function: popup_show_progress_: shows progress popup.
arguments: 3: NUMBER (width, percent), NUMBER (height, percent), and STRING (message). 
return value: NUMBER (popup index, >= 0)
"
{
    var p = component("progress", "")
    config(p, "active", true)
    var g = component("grid", "")
    grid_add(g, p, 0, 0, 1, 1, 1, 1, 1, 0)
    if (!empty(m)) {
        var lbl = component("label", m)
        grid_add(g, lbl, 0, 1, 1, 1, 1, 1, 0, 0)
    }
    var f = frame()
    var z = true
    if (f == null) {
        var f = screen()
        var z = false
    }
    var ww = integer(f[0] * (abs(w) / 100))
    var hh = integer(f[1] * (abs(h) / 100))
    var x = integer((f[0] - ww) / 2)
    var y = integer((f[1] - hh) / 2)
    return popup_show(g, ww, hh, x, y, z)
}

var popup_show_progress = fn() 
"
[ui_util] function: popup_show_progress: shows progress popup (default).
arguments:  
return value: NUMBER (popup index, >= 0)
"
{
    return popup_show_progress_(20, 10, "")
}

var config_font_size = fn(a, s) 
"
[ui_util] function: config_font_size: sets font size of a COMPONENT.
arguments: 2: COMPONENT and NUMBER
return value: NULL
"
{
    if ((!is(a, "COMPONENT"))) {
        return null
    }

    if ((!is(s, "NUMBER"))) {
        return null
    }

    var f = get(a, "font")
    if (len(f) == 3) {
        set(f, 2, s)
        config(a, "font", f)
    }

    return null
}

var config_font_size_r = fn(a, s) 
"
[ui_util] function: config_font_size_r: sets font size (relative) of a COMPONENT.
arguments: 2: COMPONENT and NUMBER
return value: NULL
"
{
    if ((!is(a, "COMPONENT"))) {
        return null
    }

    if ((!is(s, "NUMBER"))) {
        return null
    }

    var f = get(a, "font")
    if (len(f) == 3) {
        set(f, 2, f[2] + s)
        config(a, "font", f)
    }

    return null
}
